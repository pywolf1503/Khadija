package system.d.exploitation.pkg2;

/**
 * La classe {@code Semaphore} représente un sémaphore, un mécanisme de synchronisation
 * utilisé pour le contrôle d'accès à des ressources partagées. Cette classe met en œuvre
 * un sémaphore à compteur.
 */
public class semaphore {

  /**
   * Le compteur du sémaphore, indiquant le nombre de ressources disponibles.
   */
  private int counter;

  /**
   * Obtient la valeur actuelle du compteur du sémaphore.
   *
   * @return La valeur actuelle du compteur.
   */
  public int getCounter() {
    return counter;
  }

  /**
   * Initialise le sémaphore avec la valeur initiale du compteur.
   *
   * @param counter La valeur initiale du compteur du sémaphore.
   */
  public semaphore(int counter) {
    this.counter = counter;
  }

  /**
   * Réalise l'opération "P" (procure) sur le sémaphore. Décrémente le compteur
   * du sémaphore de la valeur spécifiée. Si le compteur devient négatif, le thread
   * courant est mis en attente jusqu'à ce qu'une ressource soit disponible.
   *
   * @param x La valeur à décrémenter du compteur.
   * @throws InterruptedException Si le thread est interrompu pendant l'attente.
   */
  public synchronized void p(int x) throws InterruptedException {
    counter = counter - x;
    if (counter < 0) {
      wait();
    }
  }

  /**
   * Réalise l'opération "V" (vérifie) sur le sémaphore. Incrémente le compteur
   * du sémaphore de la valeur spécifiée. Si le compteur était négatif ou nul,
   * un thread en attente est notifié pour reprendre l'exécution.
   *
   * @param x La valeur à incrémenter du compteur.
   */
  public synchronized void v(int x) {
    counter = counter + x;
    if (counter <= 0) {
      notify();
    }
  }
}
