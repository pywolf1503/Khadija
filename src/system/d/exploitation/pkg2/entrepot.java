package system.d.exploitation.pkg2;
import java.util.Arrays;
public class entrepot {
   int[] stock= new int[500];
   public volatile static int index=0;

   public void init(){
       Arrays.fill(stock, -1);
   }

    public void ajouterStock(int produit) {
        if (index < stock.length) {
            stock[index] = produit;
            index++;
            System.out.println("Product added to stock successfully." + getstocksize());
        } else {
            System.out.println("Cannot add more items to stock. Stock is full.");
        }
    }

   public int[] getStock(){
       return stock;
   }

    public void removestock() {
        if (index > 0 && index <= stock.length) {
            stock[index - 1] = -1;
            index--;
            System.out.println("Client: Removed stock. Current stock size: " + getstocksize());
        } else {
            System.out.println("Client: Unable to remove stock. Stock is empty.");
        }
    }

    public  boolean isEmpty(){
  if(index==0){
  return stock[index] == -1;
  }
  else{
  return false;
  }
  }
  
  public   int getstocksize(){
  int counter=0;
  for(int i=0;i<stock.length ;i++){
  if(stock[i]!=-1){
      counter ++;
  }
  }
  return counter; 
  }
public  boolean isstockmax(int[]stock,int maxcapacity){
 int totall=0;  
for(int product:stock) {
    if(product!=-1)
        totall+=1;
}
return totall >=maxcapacity;
}
public  boolean isstockmin(int[]stock,int mincapacity){
 int totall=0;  
for(int product:stock) {
    if(product!=-1)
        totall+=1;
}
return totall <=mincapacity;
}
}
    
    

