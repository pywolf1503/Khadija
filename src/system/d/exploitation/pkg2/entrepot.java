package system.d.exploitation.pkg2;
import java.util.Arrays;






/**
 * La classe {@code entrepot} représente un entrepôt qui stocke des produits.
 * Elle implémente l'interface {@code Runnable} pour pouvoir être utilisée comme un thread.
 */
public class entrepot implements Runnable {

    /** Le tableau stockant les produits dans l'entrepôt. */
    int[] stock = new int[500];

    /** L'index actuel dans le tableau stock. */
    public volatile static int index = 0;

    /**
     * Initialise le tableau stock avec des valeurs par défaut.
     */
    public void init() {
        Arrays.fill(stock, -1);
    }

    /**
     * Ajoute un produit au stock de l'entrepôt.
     *
     * @param produit Le produit à ajouter.
     */
    public void ajouterStock(int produit) {
        if (index < stock.length) {
            stock[index] = produit;
            index++;
            System.out.println("Produit ajouté au stock avec succès. Taille actuelle du stock : " + getTailleStock());
        } else {
            System.out.println("Impossible d'ajouter plus d'articles au stock. Le stock est plein.");
        }
    }

    /**
     * Obtient le tableau stock actuel.
     *
     * @return Le tableau stock.
     */
    public int[] getStock() {
        return stock;
    }

    /**
     * Retire un produit du stock de l'entrepôt.
     */
    public void retirerStock() {
        if (index > 0 && index <= stock.length) {
            stock[index - 1] = -1;
            index--;
            System.out.println("Client : Produit retiré. Taille actuelle du stock : " + getTailleStock());
        } else {
            System.out.println("Client : Impossible de retirer le produit. Le stock est vide.");
        }
    }

    /**
     * Vérifie si le stock est vide.
     *
     * @return {@code true} si le stock est vide, {@code false} sinon.
     */
    public boolean estVide() {
        return index == 0;
    }

    /**
     * Obtient la taille actuelle du stock.
     *
     * @return La taille actuelle du stock.
     */
    public int getTailleStock() {
        int compteur = 0;
        for (int i = 0; i < stock.length; i++) {
            if (stock[i] != -1) {
                compteur++;
            }
        }
        return compteur;
    }

    /**
     * Vérifie si le stock a atteint sa capacité maximale.
     *
     * @param capaciteMaximale La capacité maximale du stock.
     * @return {@code true} si le stock a atteint sa capacité maximale, {@code false} sinon.
     */
    public boolean estPlein(int capaciteMaximale) {
        int total = 0;
        for (int produit : stock) {
            if (produit != -1)
                total += 1;
        }
        return total >= capaciteMaximale;
    }

    /**
     * Vérifie si le stock a atteint sa capacité minimale.
     *
     * @param capaciteMinimale La capacité minimale du stock.
     * @return {@code true} si le stock a atteint sa capacité minimale, {@code false} sinon.
     */
    public boolean estVide(int capaciteMinimale) {
        int total = 0;
        for (int produit : stock) {
            if (produit != -1)
                total += 1;
        }
        return total <= capaciteMinimale;
    }

    /**
     * Exécute cette opération (méthode vide dans ce contexte).
     */
    @Override
    public void run() {

    }
}