/**
 * Le package {@code system.d.exploitation.pkg2} contient des classes liées à un système de production.
 * Ce package comprend des classes utilitaires telles que {@link system.d.exploitation.pkg2.util.SemaphoreManager}.
 */
package system.d.exploitation.pkg2;

import system.d.exploitation.pkg2.util.SemaphoreManager;

import java.util.concurrent.ThreadLocalRandom;

/**
 * La classe {@code usine} représente une usine qui produit des articles et les ajoute à un stockage.
 * Elle implémente l'interface {@code Runnable} pour être utilisée comme un thread.
 */
class usine implements Runnable {

    /**
     * Produit un article de manière aléatoire.
     *
     * @return L'article généré de manière aléatoire.
     */
    public int produce() {
        return ThreadLocalRandom.current().nextInt(5000);
    }

    private entrepot entrepot;

    /**
     * Définit le stockage pour l'usine afin d'ajouter les articles produits.
     *
     * @param entrepot Le stockage à définir pour l'usine.
     */
    public void setEntrepot(entrepot entrepot) {
        this.entrepot = entrepot;
    }

    /**
     * La logique principale pour le thread de l'usine. Elle produit continuellement des articles
     * et les ajoute au stockage. Elle utilise des sémaphores de {@link SemaphoreManager}
     * pour contrôler l'accès aux ressources partagées.
     */
    public void run() {
        while (true) {
            try {
                SemaphoreManager.empty.p(1);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            try {
                SemaphoreManager.mutex.p(1);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
            int produit = produce();
            entrepot.ajouterStock(produit);
            SemaphoreManager.mutex.v(1);
            SemaphoreManager.full.v(1);
        }
    }
}
